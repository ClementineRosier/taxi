import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
X, y = np.arange(12).reshape((6, 2)), range(6)
# On peut utiliser random_state=42 (par exemple) en option pour ne pas dependre du seed
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5)


# On emprunte le code sur le site de scikit-learn et on l'adapte a notre probleme

from sklearn import linear_model
from sklearn.metrics import mean_squared_error, r2_score

# Create linear regression object
regr = linear_model.LinearRegression()

# Train the model using the training sets
regr.fit(X_train, y_train)

# Make predictions using the testing set
y_pred = regr.predict(X_test)

# The coefficients
print('Coefficients: \n', regr.coef_)
# The mean squared error
print("Mean squared error: %.2f"
      % mean_squared_error(y_test, y_pred))
# Explained variance score: 1 is perfect prediction
print('Variance score: %.2f' % r2_score(y_test, y_pred))
